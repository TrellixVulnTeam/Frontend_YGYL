{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BookService = /*#__PURE__*/(() => {\n  class BookService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseUrl;\n    }\n\n    addBook(book) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + localStorage.getItem('token')\n        })\n      };\n      return this.http.post(this.baseUrl + '/book/add', book, httpOptions);\n    } // editAuthor(author: IAddAuthor) {\n    //   const httpOptions = {\n    //     headers: new HttpHeaders({\n    //         Authorization: 'Bearer '+ localStorage.getItem('token')\n    //     })\n    //     };\n    //     return this.http.put(`${this.baseUrl + '/author/editAuthor' }`, author, httpOptions);\n    // }\n\n\n    putCustomer(customerData) {\n      return this.http.put(`${this.baseUrl}`, customerData);\n    }\n\n    deleteBook(bookId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + localStorage.getItem('token')\n        })\n      };\n      return this.http.delete(`${this.baseUrl + '/book/deletBook'}/${bookId}`, httpOptions);\n    }\n\n    editBook(book) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + localStorage.getItem('token')\n        })\n      };\n      return this.http.put(`${this.baseUrl + '/book/editBook'}`, book, httpOptions);\n    }\n\n    getAllBooks(id) {\n      var authorId = id == null ? \"\" : id;\n      authorId = authorId == NaN ? authorId : \"\";\n      return this.http.get(this.baseUrl + '/book/list/?authorId=' + authorId.toString());\n    }\n\n    getAuthorBook(authorId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + localStorage.getItem('token')\n        })\n      };\n      return this.http.get(this.baseUrl + '/book/getAuthorBook/' + authorId.toString(), httpOptions);\n    }\n\n  }\n\n  BookService.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module"}